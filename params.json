{"name":"Android-gif-drawable","tagline":"Views and Drawable for displaying animated GIFs on Android","body":"android-gif-drawable\r\n====================\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/pl.droidsonroids.gif/android-gif-drawable/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/pl.droidsonroids.gif/android-gif-drawable)\r\n[![Build Status](https://travis-ci.org/koral--/android-gif-drawable.png?branch=master)](https://travis-ci.org/koral--/android-gif-drawable)\r\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-android--gif--drawable-brightgreen.svg?style=flat)](https://android-arsenal.com/details/1/1147)\r\n\r\n`View`s and `Drawable` for animated GIFs in Android.\r\n\r\n## Overview\r\nBundled GIFLib via JNI is used to render frames. This way should be more efficient than `WebView` or `Movie` classes.\r\n\r\n## Download\r\n\r\n**[Latest release downloads](https://github.com/koral--/android-gif-drawable/releases/latest)**\r\n\r\n### Setup\r\n\r\n#### Gradle (Android Studio)\r\nInsert the following dependency to `build.gradle` file of your project.\r\n```groovy\r\ndependencies {\r\n    compile 'pl.droidsonroids.gif:android-gif-drawable:1.1.+'\r\n}\r\n```\r\nNote that Maven central repository should be defined eg. in top-level `build.gradle` like this:\r\n```groovy \r\nbuildscript {\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n}\r\nallprojects {\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n}\r\n```\r\n\r\n#### Maven dependency\r\n\r\n```xml\r\n<dependency>\r\n\t<groupId>pl.droidsonroids.gif</groupId>\r\n\t<artifactId>android-gif-drawable</artifactId>\r\n\t<version>insert latest version here</version>\r\n\t<type>aar</type>\r\n</dependency>\r\n```\r\n\r\n####<a name=\"proguard\"></a> Proguard configuration\r\nAdd following line to proguard configuration file (usually `proguard-rules.txt` or `proguard-project.txt`):\r\n```\r\n-keep public class pl.droidsonroids.gif.GifIOException{<init>(int);}\r\n-keep class pl.droidsonroids.gif.GifInfoHandle{<init>(long,int,int,int);}\r\n```\r\n\r\n###Requirements\r\n+ Android 2.2+ (API level 8+)\r\n\r\n####Building from source\r\n+ [Android NDK](http://developer.android.com/tools/sdk/ndk/index.html) needed to compile native sources\r\n\r\n##Usage\r\n\r\n###[Sample project](https://github.com/koral--/android-gif-drawable-sample)\r\nSample project is under construction. Not all features are covered yet.\r\n\r\n###From XML\r\nThe simplest way is to use `GifImageView` (or `GifImageButton`) like a normal `ImageView`:\r\n```xml\r\n<pl.droidsonroids.gif.GifImageView\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:src=\"@drawable/src_anim\"\r\n    android:background=\"@drawable/bg_anim\"\r\n    />\r\n```\r\n\r\nIf drawables declared by `android:src` and/or `android:background` are GIF files then they \r\nwill be automatically recognized as `GifDrawable`s and animated. If given drawable is not a GIF then\r\nmentioned Views work like plain `ImageView` and `ImageButton`.\r\n\r\n`GifTextView` allows you to use GIFs as compound drawables and background.\r\n```xml\r\n<pl.droidsonroids.gif.GifTextView\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:drawableTop=\"@drawable/left_anim\"\r\n    android:drawableStart=\"@drawable/left_anim\"\r\n    android:background=\"@drawable/bg_anim\"\r\n    />\r\n```\r\n\r\n###From Java code\r\n`GifImageView`, `GifImageButton` and `GifTextView` have also hooks for setters implemented. So animated GIFs can be set by calling `setImageResource(int resId)` and `setBackgroundResource(int resId)`\r\n\r\n`GifDrawable` can be constructed directly from various sources:\r\n\r\n```java\r\n\t\t//asset file\r\n\t\tGifDrawable gifFromAssets = new GifDrawable( getAssets(), \"anim.gif\" );\r\n\t\t\r\n\t\t//resource (drawable or raw)\r\n\t\tGifDrawable gifFromResource = new GifDrawable( getResources(), R.drawable.anim );\r\n\r\n\t\t//byte array\r\n\t\tbyte[] rawGifBytes = ...\r\n\t\tGifDrawable gifFromBytes = new GifDrawable( rawGifBytes );\r\n\t\t\r\n\t\t//FileDescriptor\r\n\t\tFileDescriptor fd = new RandomAccessFile( \"/path/anim.gif\", \"r\" ).getFD();\r\n\t\tGifDrawable gifFromFd = new GifDrawable( fd );\r\n\t\t\r\n\t\t//file path\r\n\t\tGifDrawable gifFromPath = new GifDrawable( \"/path/anim.gif\" );\r\n\t\t\r\n\t\t//file\r\n\t\tFile gifFile = new File(getFilesDir(),\"anim.gif\");\r\n\t\tGifDrawable gifFromFile = new GifDrawable(gifFile);\r\n\t\t\r\n\t\t//AssetFileDescriptor\r\n\t\tAssetFileDescriptor afd = getAssets().openFd( \"anim.gif\" );\r\n\t\tGifDrawable gifFromAfd = new GifDrawable( afd );\r\n\t\t\t\t\r\n\t\t//InputStream (it must support marking)\r\n\t\tInputStream sourceIs = ...\r\n\t\tBufferedInputStream bis = new BufferedInputStream( sourceIs, GIF_LENGTH );\r\n\t\tGifDrawable gifFromStream = new GifDrawable( bis );\r\n\t\t\r\n\t\t//direct ByteBuffer\r\n\t\tByteBuffer rawGifBytes = ...\r\n\t\tGifDrawable gifFromBytes = new GifDrawable( rawGifBytes );\r\n\t\t\r\n````\r\nInputStreams are closed automatically in finalizer if GifDrawable is no longer needed \r\nso you don't need to explicitly close them. Calling `recycle()` will also close \r\nunderlaying input source. \r\n\r\nNote that all input sources need to have ability to rewind to the begining. It is required to correctly play animated GIFs \r\n(where animation is repeatable) since subsequent frames are decoded on demand from source.\r\n\r\n####Animation control\r\n`GifDrawable` implements an `Animatable` and `MediaPlayerControl` so you can use its methods and more:\r\n\r\n+ `stop()` - stops the animation, can be called from any thread\r\n+ `start()` - starts the animation, can be called from any thread\r\n+ `isRunning()` - returns whether animation is currently running or not\r\n+ `reset()` - rewinds the animation, does not restart stopped one\r\n+ `setSpeed(float factor)` - sets new animation speed factor, eg. passing 2.0f will double the animation speed\r\n+ `seekTo(int position)` - seeks animation (within current loop) to given `position` (in milliseconds) __Only seeking forward is supported__\r\n+ `getDuration()` - returns duration of one loop of the animation\r\n+ `getCurrentPosition()` - returns elapsed time from the beginning of a current loop of animation\r\n\r\n#####Using [MediaPlayerControl](http://developer.android.com/reference/android/widget/MediaController.MediaPlayerControl.html)\r\nStandard controls for a MediaPlayer (like in [VideoView](http://developer.android.com/reference/android/widget/VideoView.html)) can be used to control GIF animation and show its current progress.\r\n\r\nJust set `GifDrawable` as MediaPlayer on your [MediaController](http://developer.android.com/reference/android/widget/MediaController.html) like this:\r\n```java\r\n\t@Override\r\n\tprotected void onCreate ( Bundle savedInstanceState )\r\n\t{\r\n\t\tsuper.onCreate( savedInstanceState );\r\n\t\tGifImageButton gib = new GifImageButton( this );\r\n\t\tsetContentView( gib );\r\n\t\tgib.setImageResource( R.drawable.sample );\r\n\t\tfinal MediaController mc = new MediaController( this );\r\n\t\tmc.setMediaPlayer( ( GifDrawable ) gib.getDrawable() );\r\n\t\tmc.setAnchorView( gib );\r\n\t\tgib.setOnClickListener( new OnClickListener()\r\n\t\t{\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick ( View v )\r\n\t\t\t{\r\n\t\t\t\tmc.show();\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n```\r\n\r\n####Retrieving GIF metadata\r\n\r\n+ `getLoopCount()` - returns a loop count as defined in `NETSCAPE 2.0` extension\r\n+ `getNumberOfFrames()` - returns number of frames (at least 1)\r\n+ `getComment()` - returns comment text (`null` if GIF has no comment)\r\n+ `getFrameByteCount()` - returns minimum number of bytes that can be used to store pixels of the single frame\r\n+ `getAllocationByteCount()` - returns size (in bytes) of the allocated memory used to store pixels of given GifDrawable\r\n+ `getInputSourceByteCount()` - returns length (in bytes) of the backing input data\r\n+ `toString()` - returns human readable information about image size and number of frames (intended for debugging purpose)\r\n\r\n####Advanced\r\n \r\n+ `recycle()` - provided to speed up freeing memory (like in `android.graphics.Bitmap`)\r\n+ `isRecycled()` - checks whether drawable is recycled\r\n+ `getError()` - returns last error details\r\n\r\n##Migration from 1.0.x\r\n####Proguard configuration update\r\nProguard configuration has changed. See [Proguard configuration](#proguard) section.\r\n\r\n####Drawable recycling behavior change\r\n`GifDrawable` now uses `android.graphics.Bitmap` as frame buffer. Trying to access pixels (including drawing)\r\n of recycled `GifDrawable` will cause `IllegalStateException` like in `Bitmap`.\r\n\r\n####Minimum SDK version changed\r\nMinimum API level is now 8 (Android 2.2).\r\n\r\n####Rendering moved to background thread\r\nRendering is performed in background thread running independently from main thread so animation is running\r\neven if drawable is not drawn. However rendering is not running if drawable is not visible, see [#setVisible()](http://developer.android.com/reference/android/graphics/drawable/Drawable.html#setVisible(boolean, boolean)).\r\nThat method can be used to control drawable visibility in cases when it is not already handled by Android framework.\r\n\r\n##References\r\nThis library uses code from [GIFLib](http://giflib.sourceforge.net/) 5.1.1 and [SKIA](https://code.google.com/p/skia/).\r\n\r\n##License\r\n\r\nMIT License<br>\r\nSee [LICENSE](LICENSE) file.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}